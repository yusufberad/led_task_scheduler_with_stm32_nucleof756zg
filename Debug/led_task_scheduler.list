
led_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000114c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001370  08001370  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001370  08001370  00003060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001370  08001370  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001370  08001370  00002370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001374  08001374  00002374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001378  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  080013d8  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080013d8  00003220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000de3  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059a  00000000  00000000  00003e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00004410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000163  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e60  00000000  00000000  0000476b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c13  00000000  00000000  000075cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009e9c  00000000  00000000  000091de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001307a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d00  00000000  00000000  000130c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00013dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080012fc 	.word	0x080012fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	080012fc 	.word	0x080012fc

08000208 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <led_init_all+0x4c>)
 8000210:	607b      	str	r3, [r7, #4]
	*pRccAhb1enr |= (1 << 1);   // GPIOBEN = 1
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0202 	orr.w	r2, r3, #2
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
	uint32_t *pGpiobModeReg = (uint32_t*)0x40020400;
 800021e:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <led_init_all+0x50>)
 8000220:	603b      	str	r3, [r7, #0]

    // Set PB0, PB7, PB14 as output (01)
    *pGpiobModeReg &= ~((3 << (2 * LED_GREEN)) |
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <led_init_all+0x54>)
 8000228:	4013      	ands	r3, r2
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	6013      	str	r3, [r2, #0]
                        (3 << (2 * LED_BLUE))  |
                        (3 << (2 * LED_RED)));

    *pGpiobModeReg |=  ((1 << (2 * LED_GREEN)) |
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <led_init_all+0x58>)
 8000234:	4313      	orrs	r3, r2
 8000236:	683a      	ldr	r2, [r7, #0]
 8000238:	6013      	str	r3, [r2, #0]
//	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
//	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
//	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
//#endif

    led_off(LED_GREEN);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f82a 	bl	8000294 <led_off>
    led_off(LED_RED);
 8000240:	200e      	movs	r0, #14
 8000242:	f000 f827 	bl	8000294 <led_off>
    led_off(LED_BLUE);
 8000246:	2007      	movs	r0, #7
 8000248:	f000 f824 	bl	8000294 <led_off>



}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40023830 	.word	0x40023830
 8000258:	40020400 	.word	0x40020400
 800025c:	cfff3ffc 	.word	0xcfff3ffc
 8000260:	10004001 	.word	0x10004001

08000264 <led_on>:

void led_on(uint8_t led_no)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
    uint32_t *pGpiobOdr = (uint32_t*)0x40020414; // ODR
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <led_on+0x2c>)
 8000270:	60fb      	str	r3, [r7, #12]
    *pGpiobOdr |= (1 << led_no);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40020414 	.word	0x40020414

08000294 <led_off>:

void led_off(uint8_t led_no)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
    uint32_t *pGpiobOdr = (uint32_t*)0x40020414; // ODR
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <led_off+0x30>)
 80002a0:	60fb      	str	r3, [r7, #12]
    *pGpiobOdr &= ~(1 << led_no);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40020414 	.word	0x40020414

080002c8 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002cc:	f000 f938 	bl	8000540 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002d0:	4808      	ldr	r0, [pc, #32]	@ (80002f4 <main+0x2c>)
 80002d2:	f000 f887 	bl	80003e4 <init_scheduler_stack>

	init_task_stack();
 80002d6:	f000 f88b 	bl	80003f0 <init_task_stack>

	led_init_all();
 80002da:	f7ff ff95 	bl	8000208 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e2:	f000 f847 	bl	8000374 <init_systick_timer>

	switch_sp_to_psp();
 80002e6:	f000 f9b7 	bl	8000658 <switch_sp_to_psp>

	task1_handler();
 80002ea:	f000 f809 	bl	8000300 <task1_handler>
    /* Loop forever */
	for(;;);
 80002ee:	bf00      	nop
 80002f0:	e7fd      	b.n	80002ee <main+0x26>
 80002f2:	bf00      	nop
 80002f4:	2004ac00 	.word	0x2004ac00

080002f8 <idle_task>:
}

void idle_task(void){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	while(1);
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <idle_task+0x4>

08000300 <task1_handler>:
}

void task1_handler(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ffad 	bl	8000264 <led_on>
		task_delay(500);
 800030a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800030e:	f000 f9c5 	bl	800069c <task_delay>
		led_off(LED_GREEN);
 8000312:	2000      	movs	r0, #0
 8000314:	f7ff ffbe 	bl	8000294 <led_off>
		task_delay(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031c:	f000 f9be 	bl	800069c <task_delay>
		led_on(LED_GREEN);
 8000320:	bf00      	nop
 8000322:	e7ef      	b.n	8000304 <task1_handler+0x4>

08000324 <task2_handler>:
	}
}
void task2_handler(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000328:	2007      	movs	r0, #7
 800032a:	f7ff ff9b 	bl	8000264 <led_on>
		task_delay(250);
 800032e:	20fa      	movs	r0, #250	@ 0xfa
 8000330:	f000 f9b4 	bl	800069c <task_delay>
		led_off(LED_BLUE);
 8000334:	2007      	movs	r0, #7
 8000336:	f7ff ffad 	bl	8000294 <led_off>
		task_delay(250);
 800033a:	20fa      	movs	r0, #250	@ 0xfa
 800033c:	f000 f9ae 	bl	800069c <task_delay>
		led_on(LED_BLUE);
 8000340:	bf00      	nop
 8000342:	e7f1      	b.n	8000328 <task2_handler+0x4>

08000344 <task3_handler>:
	}
}
void task3_handler(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000348:	200e      	movs	r0, #14
 800034a:	f7ff ff8b 	bl	8000264 <led_on>
		task_delay(100);
 800034e:	2064      	movs	r0, #100	@ 0x64
 8000350:	f000 f9a4 	bl	800069c <task_delay>
		led_off(LED_RED);
 8000354:	200e      	movs	r0, #14
 8000356:	f7ff ff9d 	bl	8000294 <led_off>
		task_delay(100);
 800035a:	2064      	movs	r0, #100	@ 0x64
 800035c:	f000 f99e 	bl	800069c <task_delay>
		led_on(LED_RED);
 8000360:	bf00      	nop
 8000362:	e7f1      	b.n	8000348 <task3_handler+0x4>

08000364 <task4_handler>:
	}
}
void task4_handler(){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is Task1 \n");
 8000368:	4801      	ldr	r0, [pc, #4]	@ (8000370 <task4_handler+0xc>)
 800036a:	f000 fc33 	bl	8000bd4 <puts>
 800036e:	e7fb      	b.n	8000368 <task4_handler+0x4>
 8000370:	08001314 	.word	0x08001314

08000374 <init_systick_timer>:
	}
}


void init_systick_timer(uint32_t tick_hz){
 8000374:	b480      	push	{r7}
 8000376:	b087      	sub	sp, #28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

	uint32_t count_value  = (SYSTICK_TIM_CLK/tick_hz) - 1;
 800037c:	4a16      	ldr	r2, [pc, #88]	@ (80003d8 <init_systick_timer+0x64>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	3b01      	subs	r3, #1
 8000386:	617b      	str	r3, [r7, #20]

	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 8000388:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <init_systick_timer+0x68>)
 800038a:	613b      	str	r3, [r7, #16]
	uint32_t *pSCSR = (uint32_t *)0xE000E010;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <init_systick_timer+0x6c>)
 800038e:	60fb      	str	r3, [r7, #12]

	*pSRVR &= ~(0x00FFFFFF);
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	601a      	str	r2, [r3, #0]

	*pSRVR |= count_value;
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	431a      	orrs	r2, r3
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 2);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f043 0204 	orr.w	r2, r3, #4
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1);
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f043 0202 	orr.w	r2, r3, #2
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 0201 	orr.w	r2, r3, #1
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	601a      	str	r2, [r3, #0]

}
 80003cc:	bf00      	nop
 80003ce:	371c      	adds	r7, #28
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	00f42400 	.word	0x00f42400
 80003dc:	e000e014 	.word	0xe000e014
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 80003e4:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 80003e6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003ea:	4770      	bx	lr
}
 80003ec:	bf00      	nop
	...

080003f0 <init_task_stack>:

void init_task_stack(void){
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 80003f6:	4b47      	ldr	r3, [pc, #284]	@ (8000514 <init_task_stack+0x124>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003fc:	4b45      	ldr	r3, [pc, #276]	@ (8000514 <init_task_stack+0x124>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000402:	4b44      	ldr	r3, [pc, #272]	@ (8000514 <init_task_stack+0x124>)
 8000404:	2200      	movs	r2, #0
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000408:	4b42      	ldr	r3, [pc, #264]	@ (8000514 <init_task_stack+0x124>)
 800040a:	2200      	movs	r2, #0
 800040c:	639a      	str	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800040e:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <init_task_stack+0x124>)
 8000410:	2200      	movs	r2, #0
 8000412:	649a      	str	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000414:	4b3f      	ldr	r3, [pc, #252]	@ (8000514 <init_task_stack+0x124>)
 8000416:	4a40      	ldr	r2, [pc, #256]	@ (8000518 <init_task_stack+0x128>)
 8000418:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800041a:	4b3e      	ldr	r3, [pc, #248]	@ (8000514 <init_task_stack+0x124>)
 800041c:	4a3f      	ldr	r2, [pc, #252]	@ (800051c <init_task_stack+0x12c>)
 800041e:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000420:	4b3c      	ldr	r3, [pc, #240]	@ (8000514 <init_task_stack+0x124>)
 8000422:	4a3f      	ldr	r2, [pc, #252]	@ (8000520 <init_task_stack+0x130>)
 8000424:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000426:	4b3b      	ldr	r3, [pc, #236]	@ (8000514 <init_task_stack+0x124>)
 8000428:	4a3e      	ldr	r2, [pc, #248]	@ (8000524 <init_task_stack+0x134>)
 800042a:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <init_task_stack+0x124>)
 800042e:	4a3e      	ldr	r2, [pc, #248]	@ (8000528 <init_task_stack+0x138>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

	user_tasks[0].task_handler = idle_task;
 8000432:	4b38      	ldr	r3, [pc, #224]	@ (8000514 <init_task_stack+0x124>)
 8000434:	4a3d      	ldr	r2, [pc, #244]	@ (800052c <init_task_stack+0x13c>)
 8000436:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000438:	4b36      	ldr	r3, [pc, #216]	@ (8000514 <init_task_stack+0x124>)
 800043a:	4a3d      	ldr	r2, [pc, #244]	@ (8000530 <init_task_stack+0x140>)
 800043c:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800043e:	4b35      	ldr	r3, [pc, #212]	@ (8000514 <init_task_stack+0x124>)
 8000440:	4a3c      	ldr	r2, [pc, #240]	@ (8000534 <init_task_stack+0x144>)
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000444:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <init_task_stack+0x124>)
 8000446:	4a3c      	ldr	r2, [pc, #240]	@ (8000538 <init_task_stack+0x148>)
 8000448:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 800044a:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <init_task_stack+0x124>)
 800044c:	4a3b      	ldr	r2, [pc, #236]	@ (800053c <init_task_stack+0x14c>)
 800044e:	64da      	str	r2, [r3, #76]	@ 0x4c

    uint32_t *pPSP;

    for(int i = 0; i < MAX_TASKS ; i++){
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	e054      	b.n	8000500 <init_task_stack+0x110>
        pPSP = (uint32_t *)user_tasks[i].psp_value;
 8000456:	4a2f      	ldr	r2, [pc, #188]	@ (8000514 <init_task_stack+0x124>)
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	60fb      	str	r3, [r7, #12]

        /* Donanım frame */
        *(--pPSP) = 0x01000000U;            // xPSR
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3b04      	subs	r3, #4
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800046e:	601a      	str	r2, [r3, #0]
        *(--pPSP) = (uint32_t)user_tasks[i].task_handler;       // PC
 8000470:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <init_task_stack+0x124>)
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	4413      	add	r3, r2
 8000478:	330c      	adds	r3, #12
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3b04      	subs	r3, #4
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0xFFFFFFFDU;            // LR
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3b04      	subs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f06f 0202 	mvn.w	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0;                      // R12
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3b04      	subs	r3, #4
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0;                      // R3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3b04      	subs	r3, #4
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0;                      // R2
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3b04      	subs	r3, #4
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0;                      // R1
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3b04      	subs	r3, #4
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
        *(--pPSP) = 0;                      // R0
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3b04      	subs	r3, #4
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]

        /* Yazılım frame (R4–R11) */
        for(int j = 0; j < 8; j++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	e008      	b.n	80004e8 <init_task_stack+0xf8>
            *(--pPSP) = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b04      	subs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 8; j++){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3301      	adds	r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	ddf3      	ble.n	80004d6 <init_task_stack+0xe6>
        }

        user_tasks[i].psp_value = (uint32_t)pPSP;
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	4908      	ldr	r1, [pc, #32]	@ (8000514 <init_task_stack+0x124>)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	440b      	add	r3, r1
 80004f8:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < MAX_TASKS ; i++){
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b04      	cmp	r3, #4
 8000504:	dda7      	ble.n	8000456 <init_task_stack+0x66>
    }
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	20000080 	.word	0x20000080
 8000518:	2004b000 	.word	0x2004b000
 800051c:	2004c000 	.word	0x2004c000
 8000520:	2004bc00 	.word	0x2004bc00
 8000524:	2004b800 	.word	0x2004b800
 8000528:	2004b400 	.word	0x2004b400
 800052c:	080002f9 	.word	0x080002f9
 8000530:	08000301 	.word	0x08000301
 8000534:	08000325 	.word	0x08000325
 8000538:	08000345 	.word	0x08000345
 800053c:	08000365 	.word	0x08000365

08000540 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
    uint32_t *pSHCSR = (uint32_t *)0xE000ED24;  // System Handler Control and State Register
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <enable_processor_faults+0x3c>)
 8000548:	607b      	str	r3, [r7, #4]
    *pSHCSR |= (1 << 16);  // MemManage enable
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
    *pSHCSR |= (1 << 17);  // BusFault enable
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
    *pSHCSR |= (1 << 18);  // UsageFault enable
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed24 	.word	0xe000ed24

08000580 <get_psp_value>:



uint32_t get_psp_value(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <get_psp_value+0x1c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <get_psp_value+0x20>)
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000080 	.word	0x20000080

080005a4 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <save_psp_value+0x24>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <save_psp_value+0x28>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000080 	.word	0x20000080

080005d0 <update_next_task>:

void update_next_task(void){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005d6:	23ff      	movs	r3, #255	@ 0xff
 80005d8:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < MAX_TASKS; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	e024      	b.n	800062a <update_next_task+0x5a>
		current_task++;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <update_next_task+0x7c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <update_next_task+0x7c>)
 80005ea:	701a      	strb	r2, [r3, #0]
		current_task = current_task % MAX_TASKS;
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <update_next_task+0x7c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <update_next_task+0x80>)
 80005f2:	fba3 1302 	umull	r1, r3, r3, r2
 80005f6:	0899      	lsrs	r1, r3, #2
 80005f8:	460b      	mov	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <update_next_task+0x7c>)
 8000604:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <update_next_task+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <update_next_task+0x84>)
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	3308      	adds	r3, #8
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0)){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d103      	bne.n	8000624 <update_next_task+0x54>
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <update_next_task+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d106      	bne.n	8000632 <update_next_task+0x62>
	for(int i = 0; i < MAX_TASKS; i++){
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	ddd7      	ble.n	80005e0 <update_next_task+0x10>
 8000630:	e000      	b.n	8000634 <update_next_task+0x64>
			break;
 8000632:	bf00      	nop
		}
	}
	if(state != TASK_READY_STATE){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <update_next_task+0x70>
		current_task = 0;
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <update_next_task+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	}
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000
 8000650:	cccccccd 	.word	0xcccccccd
 8000654:	20000080 	.word	0x20000080

08000658 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){

	__asm volatile ("PUSH {LR}");
 8000658:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800065a:	f7ff ff91 	bl	8000580 <get_psp_value>
	__asm volatile ("MSR PSP,R0");
 800065e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 8000662:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0, #0x02");
 8000666:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 800066a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800066e:	4770      	bx	lr
}
 8000670:	bf00      	nop
	...

08000674 <schedule>:

void schedule(void){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <schedule+0x24>)
 800067c:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed04 	.word	0xe000ed04

0800069c <task_delay>:

void task_delay(uint32_t tick_counter){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 80006a4:	f04f 0001 	mov.w	r0, #1
 80006a8:	f380 8810 	msr	PRIMASK, r0
	if(current_task){
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <task_delay+0x54>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d015      	beq.n	80006e0 <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_counter;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <task_delay+0x58>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <task_delay+0x54>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	441a      	add	r2, r3
 80006c2:	490d      	ldr	r1, [pc, #52]	@ (80006f8 <task_delay+0x5c>)
 80006c4:	0103      	lsls	r3, r0, #4
 80006c6:	440b      	add	r3, r1
 80006c8:	3304      	adds	r3, #4
 80006ca:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <task_delay+0x54>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <task_delay+0x5c>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	3308      	adds	r3, #8
 80006d8:	22ff      	movs	r2, #255	@ 0xff
 80006da:	601a      	str	r2, [r3, #0]
		schedule();
 80006dc:	f7ff ffca 	bl	8000674 <schedule>
	}

	INTERRUPT_ENABLE();
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	f380 8810 	msr	PRIMASK, r0
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	20000080 	.word	0x20000080

080006fc <PendSV_Handler>:


__attribute__((naked)) void PendSV_Handler(void){

	__asm volatile("MRS R0, PSP");
 80006fc:	f3ef 8009 	mrs	r0, PSP

	__asm volatile("STMDB R0!, {R4-R11}");
 8000700:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000704:	b500      	push	{lr}

	__asm volatile("BL save_psp_value");
 8000706:	f7ff ff4d 	bl	80005a4 <save_psp_value>

	__asm volatile("BL update_next_task");
 800070a:	f7ff ff61 	bl	80005d0 <update_next_task>

	__asm volatile("BL get_psp_value");
 800070e:	f7ff ff37 	bl	8000580 <get_psp_value>

	__asm volatile("LDMIA R0!, {R4-R11}");
 8000712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("MSR PSP, R0");
 8000716:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800071a:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800071e:	4770      	bx	lr
}
 8000720:	bf00      	nop
	...

08000724 <update_global_tick_count>:

void update_global_tick_count(void){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <update_global_tick_count+0x18>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a03      	ldr	r2, [pc, #12]	@ (800073c <update_global_tick_count+0x18>)
 8000730:	6013      	str	r3, [r2, #0]
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	2000007c 	.word	0x2000007c

08000740 <unblock_tasks>:

void unblock_tasks(void){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	for(int i = 1; i < MAX_TASKS; i++){
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e01b      	b.n	8000784 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE && user_tasks[i].block_count <= g_tick_count) {
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <unblock_tasks+0x58>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	3308      	adds	r3, #8
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d010      	beq.n	800077e <unblock_tasks+0x3e>
 800075c:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <unblock_tasks+0x58>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3304      	adds	r3, #4
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <unblock_tasks+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d806      	bhi.n	800077e <unblock_tasks+0x3e>
			user_tasks[i].current_state = TASK_READY_STATE;
 8000770:	4a09      	ldr	r2, [pc, #36]	@ (8000798 <unblock_tasks+0x58>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	3308      	adds	r3, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b04      	cmp	r3, #4
 8000788:	dde0      	ble.n	800074c <unblock_tasks+0xc>
		}
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000080 	.word	0x20000080
 800079c:	2000007c 	.word	0x2000007c

080007a0 <SysTick_Handler>:


void SysTick_Handler(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <SysTick_Handler+0x28>)
 80007a8:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 80007aa:	f7ff ffbb 	bl	8000724 <update_global_tick_count>

	unblock_tasks();
 80007ae:	f7ff ffc7 	bl	8000740 <unblock_tasks>

	*pICSR |= (1 << 28);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <HardFault_Handler>:

void HardFault_Handler(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <HardFault_Handler+0x10>)
 80007d2:	f000 f9ff 	bl	8000bd4 <puts>
	while(1);
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <HardFault_Handler+0xa>
 80007da:	bf00      	nop
 80007dc:	08001324 	.word	0x08001324

080007e0 <MemManage_Handler>:
}
void MemManage_Handler(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	printf("Exception : MemManageFault\n");
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <MemManage_Handler+0x10>)
 80007e6:	f000 f9f5 	bl	8000bd4 <puts>
	while(1);
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <MemManage_Handler+0xa>
 80007ee:	bf00      	nop
 80007f0:	0800133c 	.word	0x0800133c

080007f4 <BusFault_Handler>:
}
void BusFault_Handler(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80007f8:	4802      	ldr	r0, [pc, #8]	@ (8000804 <BusFault_Handler+0x10>)
 80007fa:	f000 f9eb 	bl	8000bd4 <puts>
	while(1);
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <BusFault_Handler+0xa>
 8000802:	bf00      	nop
 8000804:	08001358 	.word	0x08001358

08000808 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800081a:	f3af 8000 	nop.w
 800081e:	4601      	mov	r1, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	b2ca      	uxtb	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbf0      	blt.n	800081a <_read+0x12>
  }

  return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e009      	b.n	8000868 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf1      	blt.n	8000854 <_write+0x12>
  }
  return len;
 8000870:	687b      	ldr	r3, [r7, #4]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_close>:

int _close(int file)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008a2:	605a      	str	r2, [r3, #4]
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <_isatty>:

int _isatty(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f000 fa8c 	bl	8000e30 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20050000 	.word	0x20050000
 8000944:	00000400 	.word	0x00000400
 8000948:	200000d0 	.word	0x200000d0
 800094c:	20000220 	.word	0x20000220

08000950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	@ (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	@ (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800097e:	f000 fa5d 	bl	8000e3c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000982:	f7ff fca1 	bl	80002c8 <main>

08000986 <LoopForever>:

LoopForever:
  b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000994:	08001378 	.word	0x08001378
  ldr r2, =_sbss
 8000998:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800099c:	20000220 	.word	0x20000220

080009a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <std>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	b510      	push	{r4, lr}
 80009a8:	4604      	mov	r4, r0
 80009aa:	e9c0 3300 	strd	r3, r3, [r0]
 80009ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009b2:	6083      	str	r3, [r0, #8]
 80009b4:	8181      	strh	r1, [r0, #12]
 80009b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80009b8:	81c2      	strh	r2, [r0, #14]
 80009ba:	6183      	str	r3, [r0, #24]
 80009bc:	4619      	mov	r1, r3
 80009be:	2208      	movs	r2, #8
 80009c0:	305c      	adds	r0, #92	@ 0x5c
 80009c2:	f000 f9e7 	bl	8000d94 <memset>
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <std+0x58>)
 80009c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <std+0x5c>)
 80009cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <std+0x60>)
 80009d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <std+0x64>)
 80009d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <std+0x68>)
 80009d8:	6224      	str	r4, [r4, #32]
 80009da:	429c      	cmp	r4, r3
 80009dc:	d006      	beq.n	80009ec <std+0x48>
 80009de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009e2:	4294      	cmp	r4, r2
 80009e4:	d002      	beq.n	80009ec <std+0x48>
 80009e6:	33d0      	adds	r3, #208	@ 0xd0
 80009e8:	429c      	cmp	r4, r3
 80009ea:	d105      	bne.n	80009f8 <std+0x54>
 80009ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f4:	f000 ba46 	b.w	8000e84 <__retarget_lock_init_recursive>
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	bf00      	nop
 80009fc:	08000be5 	.word	0x08000be5
 8000a00:	08000c07 	.word	0x08000c07
 8000a04:	08000c3f 	.word	0x08000c3f
 8000a08:	08000c63 	.word	0x08000c63
 8000a0c:	200000d4 	.word	0x200000d4

08000a10 <stdio_exit_handler>:
 8000a10:	4a02      	ldr	r2, [pc, #8]	@ (8000a1c <stdio_exit_handler+0xc>)
 8000a12:	4903      	ldr	r1, [pc, #12]	@ (8000a20 <stdio_exit_handler+0x10>)
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <stdio_exit_handler+0x14>)
 8000a16:	f000 b869 	b.w	8000aec <_fwalk_sglue>
 8000a1a:	bf00      	nop
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	08001185 	.word	0x08001185
 8000a24:	20000014 	.word	0x20000014

08000a28 <cleanup_stdio>:
 8000a28:	6841      	ldr	r1, [r0, #4]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <cleanup_stdio+0x34>)
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	b510      	push	{r4, lr}
 8000a30:	4604      	mov	r4, r0
 8000a32:	d001      	beq.n	8000a38 <cleanup_stdio+0x10>
 8000a34:	f000 fba6 	bl	8001184 <_fflush_r>
 8000a38:	68a1      	ldr	r1, [r4, #8]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <cleanup_stdio+0x38>)
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d002      	beq.n	8000a46 <cleanup_stdio+0x1e>
 8000a40:	4620      	mov	r0, r4
 8000a42:	f000 fb9f 	bl	8001184 <_fflush_r>
 8000a46:	68e1      	ldr	r1, [r4, #12]
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <cleanup_stdio+0x3c>)
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	d004      	beq.n	8000a58 <cleanup_stdio+0x30>
 8000a4e:	4620      	mov	r0, r4
 8000a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a54:	f000 bb96 	b.w	8001184 <_fflush_r>
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	2000013c 	.word	0x2000013c
 8000a64:	200001a4 	.word	0x200001a4

08000a68 <global_stdio_init.part.0>:
 8000a68:	b510      	push	{r4, lr}
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <global_stdio_init.part.0+0x30>)
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	@ (8000a9c <global_stdio_init.part.0+0x34>)
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <global_stdio_init.part.0+0x38>)
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	4620      	mov	r0, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	f7ff ff94 	bl	80009a4 <std>
 8000a7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a80:	2201      	movs	r2, #1
 8000a82:	2109      	movs	r1, #9
 8000a84:	f7ff ff8e 	bl	80009a4 <std>
 8000a88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a92:	2112      	movs	r1, #18
 8000a94:	f7ff bf86 	b.w	80009a4 <std>
 8000a98:	2000020c 	.word	0x2000020c
 8000a9c:	200000d4 	.word	0x200000d4
 8000aa0:	08000a11 	.word	0x08000a11

08000aa4 <__sfp_lock_acquire>:
 8000aa4:	4801      	ldr	r0, [pc, #4]	@ (8000aac <__sfp_lock_acquire+0x8>)
 8000aa6:	f000 b9ee 	b.w	8000e86 <__retarget_lock_acquire_recursive>
 8000aaa:	bf00      	nop
 8000aac:	20000215 	.word	0x20000215

08000ab0 <__sfp_lock_release>:
 8000ab0:	4801      	ldr	r0, [pc, #4]	@ (8000ab8 <__sfp_lock_release+0x8>)
 8000ab2:	f000 b9e9 	b.w	8000e88 <__retarget_lock_release_recursive>
 8000ab6:	bf00      	nop
 8000ab8:	20000215 	.word	0x20000215

08000abc <__sinit>:
 8000abc:	b510      	push	{r4, lr}
 8000abe:	4604      	mov	r4, r0
 8000ac0:	f7ff fff0 	bl	8000aa4 <__sfp_lock_acquire>
 8000ac4:	6a23      	ldr	r3, [r4, #32]
 8000ac6:	b11b      	cbz	r3, 8000ad0 <__sinit+0x14>
 8000ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000acc:	f7ff bff0 	b.w	8000ab0 <__sfp_lock_release>
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__sinit+0x28>)
 8000ad2:	6223      	str	r3, [r4, #32]
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__sinit+0x2c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <__sinit+0xc>
 8000adc:	f7ff ffc4 	bl	8000a68 <global_stdio_init.part.0>
 8000ae0:	e7f2      	b.n	8000ac8 <__sinit+0xc>
 8000ae2:	bf00      	nop
 8000ae4:	08000a29 	.word	0x08000a29
 8000ae8:	2000020c 	.word	0x2000020c

08000aec <_fwalk_sglue>:
 8000aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af0:	4607      	mov	r7, r0
 8000af2:	4688      	mov	r8, r1
 8000af4:	4614      	mov	r4, r2
 8000af6:	2600      	movs	r6, #0
 8000af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000afc:	f1b9 0901 	subs.w	r9, r9, #1
 8000b00:	d505      	bpl.n	8000b0e <_fwalk_sglue+0x22>
 8000b02:	6824      	ldr	r4, [r4, #0]
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d1f7      	bne.n	8000af8 <_fwalk_sglue+0xc>
 8000b08:	4630      	mov	r0, r6
 8000b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0e:	89ab      	ldrh	r3, [r5, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d907      	bls.n	8000b24 <_fwalk_sglue+0x38>
 8000b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	d003      	beq.n	8000b24 <_fwalk_sglue+0x38>
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	4638      	mov	r0, r7
 8000b20:	47c0      	blx	r8
 8000b22:	4306      	orrs	r6, r0
 8000b24:	3568      	adds	r5, #104	@ 0x68
 8000b26:	e7e9      	b.n	8000afc <_fwalk_sglue+0x10>

08000b28 <_puts_r>:
 8000b28:	6a03      	ldr	r3, [r0, #32]
 8000b2a:	b570      	push	{r4, r5, r6, lr}
 8000b2c:	6884      	ldr	r4, [r0, #8]
 8000b2e:	4605      	mov	r5, r0
 8000b30:	460e      	mov	r6, r1
 8000b32:	b90b      	cbnz	r3, 8000b38 <_puts_r+0x10>
 8000b34:	f7ff ffc2 	bl	8000abc <__sinit>
 8000b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b3a:	07db      	lsls	r3, r3, #31
 8000b3c:	d405      	bmi.n	8000b4a <_puts_r+0x22>
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	0598      	lsls	r0, r3, #22
 8000b42:	d402      	bmi.n	8000b4a <_puts_r+0x22>
 8000b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b46:	f000 f99e 	bl	8000e86 <__retarget_lock_acquire_recursive>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	0719      	lsls	r1, r3, #28
 8000b4e:	d502      	bpl.n	8000b56 <_puts_r+0x2e>
 8000b50:	6923      	ldr	r3, [r4, #16]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d135      	bne.n	8000bc2 <_puts_r+0x9a>
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 f8c5 	bl	8000ce8 <__swsetup_r>
 8000b5e:	b380      	cbz	r0, 8000bc2 <_puts_r+0x9a>
 8000b60:	f04f 35ff 	mov.w	r5, #4294967295
 8000b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b66:	07da      	lsls	r2, r3, #31
 8000b68:	d405      	bmi.n	8000b76 <_puts_r+0x4e>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	059b      	lsls	r3, r3, #22
 8000b6e:	d402      	bmi.n	8000b76 <_puts_r+0x4e>
 8000b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b72:	f000 f989 	bl	8000e88 <__retarget_lock_release_recursive>
 8000b76:	4628      	mov	r0, r5
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da04      	bge.n	8000b88 <_puts_r+0x60>
 8000b7e:	69a2      	ldr	r2, [r4, #24]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dc17      	bgt.n	8000bb4 <_puts_r+0x8c>
 8000b84:	290a      	cmp	r1, #10
 8000b86:	d015      	beq.n	8000bb4 <_puts_r+0x8c>
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	6022      	str	r2, [r4, #0]
 8000b8e:	7019      	strb	r1, [r3, #0]
 8000b90:	68a3      	ldr	r3, [r4, #8]
 8000b92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b96:	3b01      	subs	r3, #1
 8000b98:	60a3      	str	r3, [r4, #8]
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d1ed      	bne.n	8000b7a <_puts_r+0x52>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da11      	bge.n	8000bc6 <_puts_r+0x9e>
 8000ba2:	4622      	mov	r2, r4
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	4628      	mov	r0, r5
 8000ba8:	f000 f85f 	bl	8000c6a <__swbuf_r>
 8000bac:	3001      	adds	r0, #1
 8000bae:	d0d7      	beq.n	8000b60 <_puts_r+0x38>
 8000bb0:	250a      	movs	r5, #10
 8000bb2:	e7d7      	b.n	8000b64 <_puts_r+0x3c>
 8000bb4:	4622      	mov	r2, r4
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f000 f857 	bl	8000c6a <__swbuf_r>
 8000bbc:	3001      	adds	r0, #1
 8000bbe:	d1e7      	bne.n	8000b90 <_puts_r+0x68>
 8000bc0:	e7ce      	b.n	8000b60 <_puts_r+0x38>
 8000bc2:	3e01      	subs	r6, #1
 8000bc4:	e7e4      	b.n	8000b90 <_puts_r+0x68>
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	6022      	str	r2, [r4, #0]
 8000bcc:	220a      	movs	r2, #10
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e7ee      	b.n	8000bb0 <_puts_r+0x88>
	...

08000bd4 <puts>:
 8000bd4:	4b02      	ldr	r3, [pc, #8]	@ (8000be0 <puts+0xc>)
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	f7ff bfa5 	b.w	8000b28 <_puts_r>
 8000bde:	bf00      	nop
 8000be0:	20000010 	.word	0x20000010

08000be4 <__sread>:
 8000be4:	b510      	push	{r4, lr}
 8000be6:	460c      	mov	r4, r1
 8000be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bec:	f000 f8fc 	bl	8000de8 <_read_r>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	bfab      	itete	ge
 8000bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8000bf8:	181b      	addge	r3, r3, r0
 8000bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bfe:	bfac      	ite	ge
 8000c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c02:	81a3      	strhlt	r3, [r4, #12]
 8000c04:	bd10      	pop	{r4, pc}

08000c06 <__swrite>:
 8000c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0a:	461f      	mov	r7, r3
 8000c0c:	898b      	ldrh	r3, [r1, #12]
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	4605      	mov	r5, r0
 8000c12:	460c      	mov	r4, r1
 8000c14:	4616      	mov	r6, r2
 8000c16:	d505      	bpl.n	8000c24 <__swrite+0x1e>
 8000c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f000 f8d0 	bl	8000dc4 <_lseek_r>
 8000c24:	89a3      	ldrh	r3, [r4, #12]
 8000c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c2e:	81a3      	strh	r3, [r4, #12]
 8000c30:	4632      	mov	r2, r6
 8000c32:	463b      	mov	r3, r7
 8000c34:	4628      	mov	r0, r5
 8000c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3a:	f000 b8e7 	b.w	8000e0c <_write_r>

08000c3e <__sseek>:
 8000c3e:	b510      	push	{r4, lr}
 8000c40:	460c      	mov	r4, r1
 8000c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c46:	f000 f8bd 	bl	8000dc4 <_lseek_r>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	89a3      	ldrh	r3, [r4, #12]
 8000c4e:	bf15      	itete	ne
 8000c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c5a:	81a3      	strheq	r3, [r4, #12]
 8000c5c:	bf18      	it	ne
 8000c5e:	81a3      	strhne	r3, [r4, #12]
 8000c60:	bd10      	pop	{r4, pc}

08000c62 <__sclose>:
 8000c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c66:	f000 b89d 	b.w	8000da4 <_close_r>

08000c6a <__swbuf_r>:
 8000c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6c:	460e      	mov	r6, r1
 8000c6e:	4614      	mov	r4, r2
 8000c70:	4605      	mov	r5, r0
 8000c72:	b118      	cbz	r0, 8000c7c <__swbuf_r+0x12>
 8000c74:	6a03      	ldr	r3, [r0, #32]
 8000c76:	b90b      	cbnz	r3, 8000c7c <__swbuf_r+0x12>
 8000c78:	f7ff ff20 	bl	8000abc <__sinit>
 8000c7c:	69a3      	ldr	r3, [r4, #24]
 8000c7e:	60a3      	str	r3, [r4, #8]
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	071a      	lsls	r2, r3, #28
 8000c84:	d501      	bpl.n	8000c8a <__swbuf_r+0x20>
 8000c86:	6923      	ldr	r3, [r4, #16]
 8000c88:	b943      	cbnz	r3, 8000c9c <__swbuf_r+0x32>
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f000 f82b 	bl	8000ce8 <__swsetup_r>
 8000c92:	b118      	cbz	r0, 8000c9c <__swbuf_r+0x32>
 8000c94:	f04f 37ff 	mov.w	r7, #4294967295
 8000c98:	4638      	mov	r0, r7
 8000c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	6922      	ldr	r2, [r4, #16]
 8000ca0:	1a98      	subs	r0, r3, r2
 8000ca2:	6963      	ldr	r3, [r4, #20]
 8000ca4:	b2f6      	uxtb	r6, r6
 8000ca6:	4283      	cmp	r3, r0
 8000ca8:	4637      	mov	r7, r6
 8000caa:	dc05      	bgt.n	8000cb8 <__swbuf_r+0x4e>
 8000cac:	4621      	mov	r1, r4
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f000 fa68 	bl	8001184 <_fflush_r>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d1ed      	bne.n	8000c94 <__swbuf_r+0x2a>
 8000cb8:	68a3      	ldr	r3, [r4, #8]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	60a3      	str	r3, [r4, #8]
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	6022      	str	r2, [r4, #0]
 8000cc4:	701e      	strb	r6, [r3, #0]
 8000cc6:	6962      	ldr	r2, [r4, #20]
 8000cc8:	1c43      	adds	r3, r0, #1
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d004      	beq.n	8000cd8 <__swbuf_r+0x6e>
 8000cce:	89a3      	ldrh	r3, [r4, #12]
 8000cd0:	07db      	lsls	r3, r3, #31
 8000cd2:	d5e1      	bpl.n	8000c98 <__swbuf_r+0x2e>
 8000cd4:	2e0a      	cmp	r6, #10
 8000cd6:	d1df      	bne.n	8000c98 <__swbuf_r+0x2e>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	4628      	mov	r0, r5
 8000cdc:	f000 fa52 	bl	8001184 <_fflush_r>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d0d9      	beq.n	8000c98 <__swbuf_r+0x2e>
 8000ce4:	e7d6      	b.n	8000c94 <__swbuf_r+0x2a>
	...

08000ce8 <__swsetup_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <__swsetup_r+0xa8>)
 8000cec:	4605      	mov	r5, r0
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	b118      	cbz	r0, 8000cfc <__swsetup_r+0x14>
 8000cf4:	6a03      	ldr	r3, [r0, #32]
 8000cf6:	b90b      	cbnz	r3, 8000cfc <__swsetup_r+0x14>
 8000cf8:	f7ff fee0 	bl	8000abc <__sinit>
 8000cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d00:	0719      	lsls	r1, r3, #28
 8000d02:	d422      	bmi.n	8000d4a <__swsetup_r+0x62>
 8000d04:	06da      	lsls	r2, r3, #27
 8000d06:	d407      	bmi.n	8000d18 <__swsetup_r+0x30>
 8000d08:	2209      	movs	r2, #9
 8000d0a:	602a      	str	r2, [r5, #0]
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d10:	81a3      	strh	r3, [r4, #12]
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295
 8000d16:	e033      	b.n	8000d80 <__swsetup_r+0x98>
 8000d18:	0758      	lsls	r0, r3, #29
 8000d1a:	d512      	bpl.n	8000d42 <__swsetup_r+0x5a>
 8000d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d1e:	b141      	cbz	r1, 8000d32 <__swsetup_r+0x4a>
 8000d20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d002      	beq.n	8000d2e <__swsetup_r+0x46>
 8000d28:	4628      	mov	r0, r5
 8000d2a:	f000 f8af 	bl	8000e8c <_free_r>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d32:	89a3      	ldrh	r3, [r4, #12]
 8000d34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d38:	81a3      	strh	r3, [r4, #12]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6063      	str	r3, [r4, #4]
 8000d3e:	6923      	ldr	r3, [r4, #16]
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	89a3      	ldrh	r3, [r4, #12]
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	81a3      	strh	r3, [r4, #12]
 8000d4a:	6923      	ldr	r3, [r4, #16]
 8000d4c:	b94b      	cbnz	r3, 8000d62 <__swsetup_r+0x7a>
 8000d4e:	89a3      	ldrh	r3, [r4, #12]
 8000d50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d58:	d003      	beq.n	8000d62 <__swsetup_r+0x7a>
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f000 fa5f 	bl	8001220 <__smakebuf_r>
 8000d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d66:	f013 0201 	ands.w	r2, r3, #1
 8000d6a:	d00a      	beq.n	8000d82 <__swsetup_r+0x9a>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60a2      	str	r2, [r4, #8]
 8000d70:	6962      	ldr	r2, [r4, #20]
 8000d72:	4252      	negs	r2, r2
 8000d74:	61a2      	str	r2, [r4, #24]
 8000d76:	6922      	ldr	r2, [r4, #16]
 8000d78:	b942      	cbnz	r2, 8000d8c <__swsetup_r+0xa4>
 8000d7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d7e:	d1c5      	bne.n	8000d0c <__swsetup_r+0x24>
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
 8000d82:	0799      	lsls	r1, r3, #30
 8000d84:	bf58      	it	pl
 8000d86:	6962      	ldrpl	r2, [r4, #20]
 8000d88:	60a2      	str	r2, [r4, #8]
 8000d8a:	e7f4      	b.n	8000d76 <__swsetup_r+0x8e>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e7f7      	b.n	8000d80 <__swsetup_r+0x98>
 8000d90:	20000010 	.word	0x20000010

08000d94 <memset>:
 8000d94:	4402      	add	r2, r0
 8000d96:	4603      	mov	r3, r0
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d100      	bne.n	8000d9e <memset+0xa>
 8000d9c:	4770      	bx	lr
 8000d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000da2:	e7f9      	b.n	8000d98 <memset+0x4>

08000da4 <_close_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d06      	ldr	r5, [pc, #24]	@ (8000dc0 <_close_r+0x1c>)
 8000da8:	2300      	movs	r3, #0
 8000daa:	4604      	mov	r4, r0
 8000dac:	4608      	mov	r0, r1
 8000dae:	602b      	str	r3, [r5, #0]
 8000db0:	f7ff fd63 	bl	800087a <_close>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_close_r+0x1a>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_close_r+0x1a>
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000210 	.word	0x20000210

08000dc4 <_lseek_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4d07      	ldr	r5, [pc, #28]	@ (8000de4 <_lseek_r+0x20>)
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	4611      	mov	r1, r2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	602a      	str	r2, [r5, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f7ff fd78 	bl	80008c8 <_lseek>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_lseek_r+0x1e>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_lseek_r+0x1e>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	20000210 	.word	0x20000210

08000de8 <_read_r>:
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4d07      	ldr	r5, [pc, #28]	@ (8000e08 <_read_r+0x20>)
 8000dec:	4604      	mov	r4, r0
 8000dee:	4608      	mov	r0, r1
 8000df0:	4611      	mov	r1, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	602a      	str	r2, [r5, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	f7ff fd06 	bl	8000808 <_read>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_read_r+0x1e>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_read_r+0x1e>
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000210 	.word	0x20000210

08000e0c <_write_r>:
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4d07      	ldr	r5, [pc, #28]	@ (8000e2c <_write_r+0x20>)
 8000e10:	4604      	mov	r4, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	602a      	str	r2, [r5, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f7ff fd11 	bl	8000842 <_write>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	d102      	bne.n	8000e2a <_write_r+0x1e>
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	b103      	cbz	r3, 8000e2a <_write_r+0x1e>
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	20000210 	.word	0x20000210

08000e30 <__errno>:
 8000e30:	4b01      	ldr	r3, [pc, #4]	@ (8000e38 <__errno+0x8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000010 	.word	0x20000010

08000e3c <__libc_init_array>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000e74 <__libc_init_array+0x38>)
 8000e40:	4c0d      	ldr	r4, [pc, #52]	@ (8000e78 <__libc_init_array+0x3c>)
 8000e42:	1b64      	subs	r4, r4, r5
 8000e44:	10a4      	asrs	r4, r4, #2
 8000e46:	2600      	movs	r6, #0
 8000e48:	42a6      	cmp	r6, r4
 8000e4a:	d109      	bne.n	8000e60 <__libc_init_array+0x24>
 8000e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000e7c <__libc_init_array+0x40>)
 8000e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000e80 <__libc_init_array+0x44>)
 8000e50:	f000 fa54 	bl	80012fc <_init>
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	10a4      	asrs	r4, r4, #2
 8000e58:	2600      	movs	r6, #0
 8000e5a:	42a6      	cmp	r6, r4
 8000e5c:	d105      	bne.n	8000e6a <__libc_init_array+0x2e>
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e64:	4798      	blx	r3
 8000e66:	3601      	adds	r6, #1
 8000e68:	e7ee      	b.n	8000e48 <__libc_init_array+0xc>
 8000e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6e:	4798      	blx	r3
 8000e70:	3601      	adds	r6, #1
 8000e72:	e7f2      	b.n	8000e5a <__libc_init_array+0x1e>
 8000e74:	08001370 	.word	0x08001370
 8000e78:	08001370 	.word	0x08001370
 8000e7c:	08001370 	.word	0x08001370
 8000e80:	08001374 	.word	0x08001374

08000e84 <__retarget_lock_init_recursive>:
 8000e84:	4770      	bx	lr

08000e86 <__retarget_lock_acquire_recursive>:
 8000e86:	4770      	bx	lr

08000e88 <__retarget_lock_release_recursive>:
 8000e88:	4770      	bx	lr
	...

08000e8c <_free_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4605      	mov	r5, r0
 8000e90:	2900      	cmp	r1, #0
 8000e92:	d041      	beq.n	8000f18 <_free_r+0x8c>
 8000e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e98:	1f0c      	subs	r4, r1, #4
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfb8      	it	lt
 8000e9e:	18e4      	addlt	r4, r4, r3
 8000ea0:	f000 f8e0 	bl	8001064 <__malloc_lock>
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <_free_r+0x90>)
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	b933      	cbnz	r3, 8000eb8 <_free_r+0x2c>
 8000eaa:	6063      	str	r3, [r4, #4]
 8000eac:	6014      	str	r4, [r2, #0]
 8000eae:	4628      	mov	r0, r5
 8000eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eb4:	f000 b8dc 	b.w	8001070 <__malloc_unlock>
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <_free_r+0x42>
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	1821      	adds	r1, r4, r0
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	bf01      	itttt	eq
 8000ec4:	6819      	ldreq	r1, [r3, #0]
 8000ec6:	685b      	ldreq	r3, [r3, #4]
 8000ec8:	1809      	addeq	r1, r1, r0
 8000eca:	6021      	streq	r1, [r4, #0]
 8000ecc:	e7ed      	b.n	8000eaa <_free_r+0x1e>
 8000ece:	461a      	mov	r2, r3
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	b10b      	cbz	r3, 8000ed8 <_free_r+0x4c>
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	d9fa      	bls.n	8000ece <_free_r+0x42>
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	1850      	adds	r0, r2, r1
 8000edc:	42a0      	cmp	r0, r4
 8000ede:	d10b      	bne.n	8000ef8 <_free_r+0x6c>
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	4401      	add	r1, r0
 8000ee4:	1850      	adds	r0, r2, r1
 8000ee6:	4283      	cmp	r3, r0
 8000ee8:	6011      	str	r1, [r2, #0]
 8000eea:	d1e0      	bne.n	8000eae <_free_r+0x22>
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	6053      	str	r3, [r2, #4]
 8000ef2:	4408      	add	r0, r1
 8000ef4:	6010      	str	r0, [r2, #0]
 8000ef6:	e7da      	b.n	8000eae <_free_r+0x22>
 8000ef8:	d902      	bls.n	8000f00 <_free_r+0x74>
 8000efa:	230c      	movs	r3, #12
 8000efc:	602b      	str	r3, [r5, #0]
 8000efe:	e7d6      	b.n	8000eae <_free_r+0x22>
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	1821      	adds	r1, r4, r0
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf04      	itt	eq
 8000f08:	6819      	ldreq	r1, [r3, #0]
 8000f0a:	685b      	ldreq	r3, [r3, #4]
 8000f0c:	6063      	str	r3, [r4, #4]
 8000f0e:	bf04      	itt	eq
 8000f10:	1809      	addeq	r1, r1, r0
 8000f12:	6021      	streq	r1, [r4, #0]
 8000f14:	6054      	str	r4, [r2, #4]
 8000f16:	e7ca      	b.n	8000eae <_free_r+0x22>
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000021c 	.word	0x2000021c

08000f20 <sbrk_aligned>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	4e0f      	ldr	r6, [pc, #60]	@ (8000f60 <sbrk_aligned+0x40>)
 8000f24:	460c      	mov	r4, r1
 8000f26:	6831      	ldr	r1, [r6, #0]
 8000f28:	4605      	mov	r5, r0
 8000f2a:	b911      	cbnz	r1, 8000f32 <sbrk_aligned+0x12>
 8000f2c:	f000 f9d6 	bl	80012dc <_sbrk_r>
 8000f30:	6030      	str	r0, [r6, #0]
 8000f32:	4621      	mov	r1, r4
 8000f34:	4628      	mov	r0, r5
 8000f36:	f000 f9d1 	bl	80012dc <_sbrk_r>
 8000f3a:	1c43      	adds	r3, r0, #1
 8000f3c:	d103      	bne.n	8000f46 <sbrk_aligned+0x26>
 8000f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
 8000f46:	1cc4      	adds	r4, r0, #3
 8000f48:	f024 0403 	bic.w	r4, r4, #3
 8000f4c:	42a0      	cmp	r0, r4
 8000f4e:	d0f8      	beq.n	8000f42 <sbrk_aligned+0x22>
 8000f50:	1a21      	subs	r1, r4, r0
 8000f52:	4628      	mov	r0, r5
 8000f54:	f000 f9c2 	bl	80012dc <_sbrk_r>
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d1f2      	bne.n	8000f42 <sbrk_aligned+0x22>
 8000f5c:	e7ef      	b.n	8000f3e <sbrk_aligned+0x1e>
 8000f5e:	bf00      	nop
 8000f60:	20000218 	.word	0x20000218

08000f64 <_malloc_r>:
 8000f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f68:	1ccd      	adds	r5, r1, #3
 8000f6a:	f025 0503 	bic.w	r5, r5, #3
 8000f6e:	3508      	adds	r5, #8
 8000f70:	2d0c      	cmp	r5, #12
 8000f72:	bf38      	it	cc
 8000f74:	250c      	movcc	r5, #12
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	4606      	mov	r6, r0
 8000f7a:	db01      	blt.n	8000f80 <_malloc_r+0x1c>
 8000f7c:	42a9      	cmp	r1, r5
 8000f7e:	d904      	bls.n	8000f8a <_malloc_r+0x26>
 8000f80:	230c      	movs	r3, #12
 8000f82:	6033      	str	r3, [r6, #0]
 8000f84:	2000      	movs	r0, #0
 8000f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001060 <_malloc_r+0xfc>
 8000f8e:	f000 f869 	bl	8001064 <__malloc_lock>
 8000f92:	f8d8 3000 	ldr.w	r3, [r8]
 8000f96:	461c      	mov	r4, r3
 8000f98:	bb44      	cbnz	r4, 8000fec <_malloc_r+0x88>
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f7ff ffbf 	bl	8000f20 <sbrk_aligned>
 8000fa2:	1c43      	adds	r3, r0, #1
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	d158      	bne.n	800105a <_malloc_r+0xf6>
 8000fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8000fac:	4627      	mov	r7, r4
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d143      	bne.n	800103a <_malloc_r+0xd6>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d04b      	beq.n	800104e <_malloc_r+0xea>
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	4639      	mov	r1, r7
 8000fba:	4630      	mov	r0, r6
 8000fbc:	eb04 0903 	add.w	r9, r4, r3
 8000fc0:	f000 f98c 	bl	80012dc <_sbrk_r>
 8000fc4:	4581      	cmp	r9, r0
 8000fc6:	d142      	bne.n	800104e <_malloc_r+0xea>
 8000fc8:	6821      	ldr	r1, [r4, #0]
 8000fca:	1a6d      	subs	r5, r5, r1
 8000fcc:	4629      	mov	r1, r5
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff ffa6 	bl	8000f20 <sbrk_aligned>
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	d03a      	beq.n	800104e <_malloc_r+0xea>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	442b      	add	r3, r5
 8000fdc:	6023      	str	r3, [r4, #0]
 8000fde:	f8d8 3000 	ldr.w	r3, [r8]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	bb62      	cbnz	r2, 8001040 <_malloc_r+0xdc>
 8000fe6:	f8c8 7000 	str.w	r7, [r8]
 8000fea:	e00f      	b.n	800100c <_malloc_r+0xa8>
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	1b52      	subs	r2, r2, r5
 8000ff0:	d420      	bmi.n	8001034 <_malloc_r+0xd0>
 8000ff2:	2a0b      	cmp	r2, #11
 8000ff4:	d917      	bls.n	8001026 <_malloc_r+0xc2>
 8000ff6:	1961      	adds	r1, r4, r5
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	6025      	str	r5, [r4, #0]
 8000ffc:	bf18      	it	ne
 8000ffe:	6059      	strne	r1, [r3, #4]
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	bf08      	it	eq
 8001004:	f8c8 1000 	streq.w	r1, [r8]
 8001008:	5162      	str	r2, [r4, r5]
 800100a:	604b      	str	r3, [r1, #4]
 800100c:	4630      	mov	r0, r6
 800100e:	f000 f82f 	bl	8001070 <__malloc_unlock>
 8001012:	f104 000b 	add.w	r0, r4, #11
 8001016:	1d23      	adds	r3, r4, #4
 8001018:	f020 0007 	bic.w	r0, r0, #7
 800101c:	1ac2      	subs	r2, r0, r3
 800101e:	bf1c      	itt	ne
 8001020:	1a1b      	subne	r3, r3, r0
 8001022:	50a3      	strne	r3, [r4, r2]
 8001024:	e7af      	b.n	8000f86 <_malloc_r+0x22>
 8001026:	6862      	ldr	r2, [r4, #4]
 8001028:	42a3      	cmp	r3, r4
 800102a:	bf0c      	ite	eq
 800102c:	f8c8 2000 	streq.w	r2, [r8]
 8001030:	605a      	strne	r2, [r3, #4]
 8001032:	e7eb      	b.n	800100c <_malloc_r+0xa8>
 8001034:	4623      	mov	r3, r4
 8001036:	6864      	ldr	r4, [r4, #4]
 8001038:	e7ae      	b.n	8000f98 <_malloc_r+0x34>
 800103a:	463c      	mov	r4, r7
 800103c:	687f      	ldr	r7, [r7, #4]
 800103e:	e7b6      	b.n	8000fae <_malloc_r+0x4a>
 8001040:	461a      	mov	r2, r3
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	42a3      	cmp	r3, r4
 8001046:	d1fb      	bne.n	8001040 <_malloc_r+0xdc>
 8001048:	2300      	movs	r3, #0
 800104a:	6053      	str	r3, [r2, #4]
 800104c:	e7de      	b.n	800100c <_malloc_r+0xa8>
 800104e:	230c      	movs	r3, #12
 8001050:	6033      	str	r3, [r6, #0]
 8001052:	4630      	mov	r0, r6
 8001054:	f000 f80c 	bl	8001070 <__malloc_unlock>
 8001058:	e794      	b.n	8000f84 <_malloc_r+0x20>
 800105a:	6005      	str	r5, [r0, #0]
 800105c:	e7d6      	b.n	800100c <_malloc_r+0xa8>
 800105e:	bf00      	nop
 8001060:	2000021c 	.word	0x2000021c

08001064 <__malloc_lock>:
 8001064:	4801      	ldr	r0, [pc, #4]	@ (800106c <__malloc_lock+0x8>)
 8001066:	f7ff bf0e 	b.w	8000e86 <__retarget_lock_acquire_recursive>
 800106a:	bf00      	nop
 800106c:	20000214 	.word	0x20000214

08001070 <__malloc_unlock>:
 8001070:	4801      	ldr	r0, [pc, #4]	@ (8001078 <__malloc_unlock+0x8>)
 8001072:	f7ff bf09 	b.w	8000e88 <__retarget_lock_release_recursive>
 8001076:	bf00      	nop
 8001078:	20000214 	.word	0x20000214

0800107c <__sflush_r>:
 800107c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	0716      	lsls	r6, r2, #28
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	d454      	bmi.n	8001136 <__sflush_r+0xba>
 800108c:	684b      	ldr	r3, [r1, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dc02      	bgt.n	8001098 <__sflush_r+0x1c>
 8001092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	dd48      	ble.n	800112a <__sflush_r+0xae>
 8001098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800109a:	2e00      	cmp	r6, #0
 800109c:	d045      	beq.n	800112a <__sflush_r+0xae>
 800109e:	2300      	movs	r3, #0
 80010a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010a4:	682f      	ldr	r7, [r5, #0]
 80010a6:	6a21      	ldr	r1, [r4, #32]
 80010a8:	602b      	str	r3, [r5, #0]
 80010aa:	d030      	beq.n	800110e <__sflush_r+0x92>
 80010ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	0759      	lsls	r1, r3, #29
 80010b2:	d505      	bpl.n	80010c0 <__sflush_r+0x44>
 80010b4:	6863      	ldr	r3, [r4, #4]
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010ba:	b10b      	cbz	r3, 80010c0 <__sflush_r+0x44>
 80010bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	2300      	movs	r3, #0
 80010c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010c4:	6a21      	ldr	r1, [r4, #32]
 80010c6:	4628      	mov	r0, r5
 80010c8:	47b0      	blx	r6
 80010ca:	1c43      	adds	r3, r0, #1
 80010cc:	89a3      	ldrh	r3, [r4, #12]
 80010ce:	d106      	bne.n	80010de <__sflush_r+0x62>
 80010d0:	6829      	ldr	r1, [r5, #0]
 80010d2:	291d      	cmp	r1, #29
 80010d4:	d82b      	bhi.n	800112e <__sflush_r+0xb2>
 80010d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001180 <__sflush_r+0x104>)
 80010d8:	40ca      	lsrs	r2, r1
 80010da:	07d6      	lsls	r6, r2, #31
 80010dc:	d527      	bpl.n	800112e <__sflush_r+0xb2>
 80010de:	2200      	movs	r2, #0
 80010e0:	6062      	str	r2, [r4, #4]
 80010e2:	04d9      	lsls	r1, r3, #19
 80010e4:	6922      	ldr	r2, [r4, #16]
 80010e6:	6022      	str	r2, [r4, #0]
 80010e8:	d504      	bpl.n	80010f4 <__sflush_r+0x78>
 80010ea:	1c42      	adds	r2, r0, #1
 80010ec:	d101      	bne.n	80010f2 <__sflush_r+0x76>
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	b903      	cbnz	r3, 80010f4 <__sflush_r+0x78>
 80010f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80010f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010f6:	602f      	str	r7, [r5, #0]
 80010f8:	b1b9      	cbz	r1, 800112a <__sflush_r+0xae>
 80010fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010fe:	4299      	cmp	r1, r3
 8001100:	d002      	beq.n	8001108 <__sflush_r+0x8c>
 8001102:	4628      	mov	r0, r5
 8001104:	f7ff fec2 	bl	8000e8c <_free_r>
 8001108:	2300      	movs	r3, #0
 800110a:	6363      	str	r3, [r4, #52]	@ 0x34
 800110c:	e00d      	b.n	800112a <__sflush_r+0xae>
 800110e:	2301      	movs	r3, #1
 8001110:	4628      	mov	r0, r5
 8001112:	47b0      	blx	r6
 8001114:	4602      	mov	r2, r0
 8001116:	1c50      	adds	r0, r2, #1
 8001118:	d1c9      	bne.n	80010ae <__sflush_r+0x32>
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0c6      	beq.n	80010ae <__sflush_r+0x32>
 8001120:	2b1d      	cmp	r3, #29
 8001122:	d001      	beq.n	8001128 <__sflush_r+0xac>
 8001124:	2b16      	cmp	r3, #22
 8001126:	d11e      	bne.n	8001166 <__sflush_r+0xea>
 8001128:	602f      	str	r7, [r5, #0]
 800112a:	2000      	movs	r0, #0
 800112c:	e022      	b.n	8001174 <__sflush_r+0xf8>
 800112e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001132:	b21b      	sxth	r3, r3
 8001134:	e01b      	b.n	800116e <__sflush_r+0xf2>
 8001136:	690f      	ldr	r7, [r1, #16]
 8001138:	2f00      	cmp	r7, #0
 800113a:	d0f6      	beq.n	800112a <__sflush_r+0xae>
 800113c:	0793      	lsls	r3, r2, #30
 800113e:	680e      	ldr	r6, [r1, #0]
 8001140:	bf08      	it	eq
 8001142:	694b      	ldreq	r3, [r1, #20]
 8001144:	600f      	str	r7, [r1, #0]
 8001146:	bf18      	it	ne
 8001148:	2300      	movne	r3, #0
 800114a:	eba6 0807 	sub.w	r8, r6, r7
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	f1b8 0f00 	cmp.w	r8, #0
 8001154:	dde9      	ble.n	800112a <__sflush_r+0xae>
 8001156:	6a21      	ldr	r1, [r4, #32]
 8001158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800115a:	4643      	mov	r3, r8
 800115c:	463a      	mov	r2, r7
 800115e:	4628      	mov	r0, r5
 8001160:	47b0      	blx	r6
 8001162:	2800      	cmp	r0, #0
 8001164:	dc08      	bgt.n	8001178 <__sflush_r+0xfc>
 8001166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800116a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800116e:	81a3      	strh	r3, [r4, #12]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001178:	4407      	add	r7, r0
 800117a:	eba8 0800 	sub.w	r8, r8, r0
 800117e:	e7e7      	b.n	8001150 <__sflush_r+0xd4>
 8001180:	20400001 	.word	0x20400001

08001184 <_fflush_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	690b      	ldr	r3, [r1, #16]
 8001188:	4605      	mov	r5, r0
 800118a:	460c      	mov	r4, r1
 800118c:	b913      	cbnz	r3, 8001194 <_fflush_r+0x10>
 800118e:	2500      	movs	r5, #0
 8001190:	4628      	mov	r0, r5
 8001192:	bd38      	pop	{r3, r4, r5, pc}
 8001194:	b118      	cbz	r0, 800119e <_fflush_r+0x1a>
 8001196:	6a03      	ldr	r3, [r0, #32]
 8001198:	b90b      	cbnz	r3, 800119e <_fflush_r+0x1a>
 800119a:	f7ff fc8f 	bl	8000abc <__sinit>
 800119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f3      	beq.n	800118e <_fflush_r+0xa>
 80011a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011a8:	07d0      	lsls	r0, r2, #31
 80011aa:	d404      	bmi.n	80011b6 <_fflush_r+0x32>
 80011ac:	0599      	lsls	r1, r3, #22
 80011ae:	d402      	bmi.n	80011b6 <_fflush_r+0x32>
 80011b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011b2:	f7ff fe68 	bl	8000e86 <__retarget_lock_acquire_recursive>
 80011b6:	4628      	mov	r0, r5
 80011b8:	4621      	mov	r1, r4
 80011ba:	f7ff ff5f 	bl	800107c <__sflush_r>
 80011be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011c0:	07da      	lsls	r2, r3, #31
 80011c2:	4605      	mov	r5, r0
 80011c4:	d4e4      	bmi.n	8001190 <_fflush_r+0xc>
 80011c6:	89a3      	ldrh	r3, [r4, #12]
 80011c8:	059b      	lsls	r3, r3, #22
 80011ca:	d4e1      	bmi.n	8001190 <_fflush_r+0xc>
 80011cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011ce:	f7ff fe5b 	bl	8000e88 <__retarget_lock_release_recursive>
 80011d2:	e7dd      	b.n	8001190 <_fflush_r+0xc>

080011d4 <__swhatbuf_r>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	460c      	mov	r4, r1
 80011d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011dc:	2900      	cmp	r1, #0
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	4615      	mov	r5, r2
 80011e2:	461e      	mov	r6, r3
 80011e4:	da0d      	bge.n	8001202 <__swhatbuf_r+0x2e>
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011ec:	f04f 0100 	mov.w	r1, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2340      	movne	r3, #64	@ 0x40
 80011f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011f8:	2000      	movs	r0, #0
 80011fa:	6031      	str	r1, [r6, #0]
 80011fc:	602b      	str	r3, [r5, #0]
 80011fe:	b016      	add	sp, #88	@ 0x58
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	466a      	mov	r2, sp
 8001204:	f000 f848 	bl	8001298 <_fstat_r>
 8001208:	2800      	cmp	r0, #0
 800120a:	dbec      	blt.n	80011e6 <__swhatbuf_r+0x12>
 800120c:	9901      	ldr	r1, [sp, #4]
 800120e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001216:	4259      	negs	r1, r3
 8001218:	4159      	adcs	r1, r3
 800121a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800121e:	e7eb      	b.n	80011f8 <__swhatbuf_r+0x24>

08001220 <__smakebuf_r>:
 8001220:	898b      	ldrh	r3, [r1, #12]
 8001222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001224:	079d      	lsls	r5, r3, #30
 8001226:	4606      	mov	r6, r0
 8001228:	460c      	mov	r4, r1
 800122a:	d507      	bpl.n	800123c <__smakebuf_r+0x1c>
 800122c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	6123      	str	r3, [r4, #16]
 8001234:	2301      	movs	r3, #1
 8001236:	6163      	str	r3, [r4, #20]
 8001238:	b003      	add	sp, #12
 800123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123c:	ab01      	add	r3, sp, #4
 800123e:	466a      	mov	r2, sp
 8001240:	f7ff ffc8 	bl	80011d4 <__swhatbuf_r>
 8001244:	9f00      	ldr	r7, [sp, #0]
 8001246:	4605      	mov	r5, r0
 8001248:	4639      	mov	r1, r7
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff fe8a 	bl	8000f64 <_malloc_r>
 8001250:	b948      	cbnz	r0, 8001266 <__smakebuf_r+0x46>
 8001252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001256:	059a      	lsls	r2, r3, #22
 8001258:	d4ee      	bmi.n	8001238 <__smakebuf_r+0x18>
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	81a3      	strh	r3, [r4, #12]
 8001264:	e7e2      	b.n	800122c <__smakebuf_r+0xc>
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	6020      	str	r0, [r4, #0]
 800126a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126e:	81a3      	strh	r3, [r4, #12]
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001276:	b15b      	cbz	r3, 8001290 <__smakebuf_r+0x70>
 8001278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800127c:	4630      	mov	r0, r6
 800127e:	f000 f81d 	bl	80012bc <_isatty_r>
 8001282:	b128      	cbz	r0, 8001290 <__smakebuf_r+0x70>
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	81a3      	strh	r3, [r4, #12]
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	431d      	orrs	r5, r3
 8001294:	81a5      	strh	r5, [r4, #12]
 8001296:	e7cf      	b.n	8001238 <__smakebuf_r+0x18>

08001298 <_fstat_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d07      	ldr	r5, [pc, #28]	@ (80012b8 <_fstat_r+0x20>)
 800129c:	2300      	movs	r3, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	f7ff faf4 	bl	8000892 <_fstat>
 80012aa:	1c43      	adds	r3, r0, #1
 80012ac:	d102      	bne.n	80012b4 <_fstat_r+0x1c>
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	b103      	cbz	r3, 80012b4 <_fstat_r+0x1c>
 80012b2:	6023      	str	r3, [r4, #0]
 80012b4:	bd38      	pop	{r3, r4, r5, pc}
 80012b6:	bf00      	nop
 80012b8:	20000210 	.word	0x20000210

080012bc <_isatty_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d06      	ldr	r5, [pc, #24]	@ (80012d8 <_isatty_r+0x1c>)
 80012c0:	2300      	movs	r3, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	f7ff faf3 	bl	80008b2 <_isatty>
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	d102      	bne.n	80012d6 <_isatty_r+0x1a>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	b103      	cbz	r3, 80012d6 <_isatty_r+0x1a>
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
 80012d8:	20000210 	.word	0x20000210

080012dc <_sbrk_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4d06      	ldr	r5, [pc, #24]	@ (80012f8 <_sbrk_r+0x1c>)
 80012e0:	2300      	movs	r3, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	f7ff fafc 	bl	80008e4 <_sbrk>
 80012ec:	1c43      	adds	r3, r0, #1
 80012ee:	d102      	bne.n	80012f6 <_sbrk_r+0x1a>
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	b103      	cbz	r3, 80012f6 <_sbrk_r+0x1a>
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	20000210 	.word	0x20000210

080012fc <_init>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	bf00      	nop
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr

08001308 <_fini>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr
